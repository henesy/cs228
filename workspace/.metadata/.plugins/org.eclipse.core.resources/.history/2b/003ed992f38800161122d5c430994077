package edu.iastate.cs228.hw2;

import java.io.FileNotFoundException; 
import java.lang.NumberFormatException;
import java.util.InputMismatchException;
import java.lang.IllegalArgumentException; 

/**
 *  
 * @author
 *
 */

/**
 * 
 * This class implements the mergesort algorithm.   
 *
 */

public class MergeSorter extends AbstractSorter
{
	// Other private instance variables if you need ... 
	
	/**
	 * The two constructors below invoke their corresponding superclass constructors. They
	 * also set the instance variables algorithm and outputFileName in the superclass.
	 */

	/** 
	 * Constructor accepts an input array of points. 
	 * in the array. 
	 *  
	 * @param pts   input array of integers
	 */
	public MergeSorter(Point[] pts) 
	{
		// TODO  
		super(pts);
		super.outputFileName = "merge.txt";
		super.algorithm = "mergesort";
		
	}
	
	
	/**
	 * Constructor reads points from a file. 
	 * 
	 * @param inputFileName  name of the input file
	 * @throws FileNotFoundException 
	 * @throws InputMismatchException 
	 */
	public MergeSorter(String inputFileName) throws InputMismatchException, FileNotFoundException 
	{
		// TODO 
		super(inputFileName);
		super.outputFileName = "merge.txt";
		super.algorithm = "mergesort";
		
	}


	/**
	 * Perform mergesort on the array points[] of the parent class AbstractSorter. 
	 * 
	 * @param order  1   by x-coordinate 
	 * 			     2   by polar angle 
	 *
	 */
	@Override 
	public void sort(int order)
	{
		// TODO 
		setComparator(order);
		mergeSortRec(points);
	}

	
	/**
	 * This is a recursive method that carries out mergesort on an array pts[] of points. One 
	 * way is to make copies of the two halves of pts[], recursively call mergeSort on them, 
	 * and merge the two sorted subarrays into pts[].   
	 * 
	 * @param pts	point array 
	 */
	private void mergeSortRec(Point[] pts)
	{
		points = mergeSort(pts);
	}

	
	// Other private methods in case you need ...
	
	/**
	 * Performs merge sort
	 * @param pts
	 * @return
	 */
	private Point[] mergeSort(Point[] pts) {
		if(pts.length <= 1)
			return pts;
		
		System.out.println(pts.length);
		
		Point[] a = new Point[pts.length/2];
		Point[] b = new Point[pts.length - pts.length/2];
		
		int i;
		for(i = 0; i < a.length; i++) {
			a[i] = points[i];
		}
		int j = pts.length/2;
		for(i = 0; i < b.length && j < points.length; i++, j++) {
			b[i] = points[j];
		}
		
		System.out.println(a.length);
		System.out.println(b.length);
		
		System.out.println(a[0].toString());
		//System.out.println(a[1].toString());
		
		System.out.println(b[0].toString());
		//System.out.println(b[1].toString());
		
		System.out.println(pointComparator.toString());
		
		/* problem is after this point */
		
		Point[] c = mergeSort(a);
		Point[] d = mergeSort(b);
		
		Point[] e = new Point[c.length + d.length];
		
		System.out.println(e.length);
		
		int k = 0;
		i = 0;
		j = 0;
		
		while(i < c.length+1 && j < d.length+1 && k < e.length) {
			System.out.println(i + " " + j + ' ' + k);
			
			if(i >= c.length) {
				e[k] = d[j];
				k++;
				break;
			}
			if(j >= d.length) {
				e[k] = c[i];
				k++;
				break;
			}
			
			if(pointComparator.compare(c[i], d[j]) < 0) {
				e[k] = c[i];
				i++;
			} else if(pointComparator.compare(c[i], d[j]) > 0) {
				e[k] = d[j];
				j++;
			}
			k++;
		}
		
		return e;
	}

}
